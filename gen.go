//go:build generate

package main

import (
	"bytes"
	"encoding/json"
	"go/format"
	"net/http"
	"os"
	"strconv"
	"strings"
	"text/template"
)

const paletteURL = "https://raw.githubusercontent.com/catppuccin/palette/main/palette-porcelain.json"

type PaletteColor struct {
	Hex string    `json:"hex"`
	RGB []int     `json:"rgb"`
	HSL []float64 `json:"hsl"`
}

func (p PaletteColor) RGBJoin() string {
	var s []string
	for _, i := range p.RGB {
		s = append(s, strconv.Itoa(i))
	}
	return "{" + strings.Join(s, ", ") + "}"
}

func (p PaletteColor) HSLJoin() string {
	var s []string
	for _, i := range p.HSL {
		s = append(s, strconv.FormatFloat(i, 'f', -1, 64))
	}
	return "{" + strings.Join(s, ", ") + "}"
}

//go:generate go run gen.go
func main() {
	var palette map[string]map[string]PaletteColor

	res, err := http.Get(paletteURL)
	if err != nil {
		panic(err)
	}
	defer res.Body.Close()

	if err := json.NewDecoder(res.Body).Decode(&palette); err != nil {
		panic(err)
	}

	for variant, colors := range palette {
		if err := generateVariant(variant, colors); err != nil {
			panic(err)
		}
	}
}

func generateVariant(name string, colors map[string]PaletteColor) error {
	fi, err := os.Create(name + ".go")
	if err != nil {
		panic(err)
	}
	defer fi.Close()

	var buf bytes.Buffer
	if err := variantTmpl.Execute(&buf, map[string]any{
		"variant": name,
		"colors":  colors,
	}); err != nil {
		panic(err)
	}

	src, err := format.Source(buf.Bytes())
	if err != nil {
		panic(err)
	}

	if _, err := fi.Write(src); err != nil {
		panic(err)
	}

	return nil
}

var variantTmpl = template.Must(template.New("").Funcs(template.FuncMap{
	"title": strings.Title,
}).Parse(`// Code generated by gen.go. DO NOT EDIT.
package catppuccingo

// {{.variant}} variant.
type {{.variant}} struct{}

// {{.variant | title}} flavour variant.
var {{.variant | title}} Flavour = {{.variant}}{}

func ({{.variant}}) Name() string { return "{{.variant}}" }

{{range $name, $color := .colors}}
func ({{$.variant}}) {{$name | title}}() Color {
	return Color{
		Hex: "#{{$color.Hex}}",
		RGB: [3]uint32{{$color.RGBJoin}},
		HSL: [3]float32{{$color.HSLJoin}},
	}
}

{{end}}
`))
